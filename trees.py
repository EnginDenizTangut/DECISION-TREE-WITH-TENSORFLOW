# -*- coding: utf-8 -*-
"""TREES.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R5qYOPktQ1wMQDKr7Fg5VF5QlAVGuetp
"""

!pip install tensorflow_decision_forests

!pip install wurlitzer

import os
os.environ['TF_USE_LEGACY_KERAS'] = '1'

import tensorflow_decision_forests as tfdf

import numpy as np
import pandas as pd
import tensorflow as tf
import tf_keras
import math

data = pd.read_csv("medical_insurance.csv")

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

data.sex = le.fit_transform(data.sex)
data.smoker = le.fit_transform(data.smoker)
data.region = le.fit_transform(data.region)

data.charges = data['charges'].astype(int)

label = "charges"

classes = data[label].unique().tolist()
print(f"Label classes: {classes}")
data[label] = data[label].map(classes.index)

# Split the dataset into a training and a testing dataset.

def split_dataset(dataset, test_ratio=0.30):
  """Splits a panda dataframe in two."""
  test_indices = np.random.rand(len(dataset)) < test_ratio
  return dataset[~test_indices], dataset[test_indices]


train_ds_pd, test_ds_pd = split_dataset(data)
print("{} examples in training, {} examples for testing.".format(
    len(train_ds_pd), len(test_ds_pd)))

train_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train_ds_pd, label=label,max_num_classes=1200)
test_ds = tfdf.keras.pd_dataframe_to_tf_dataset(test_ds_pd, label=label,max_num_classes=1200)

model_1 = tfdf.keras.RandomForestModel(verbose=2)
model_1.fit(train_ds)

model_1.compile(metrics=["accuracy"])
evaluation = model_1.evaluate(test_ds, return_dict=True)
print()

for name, value in evaluation.items():
  print(f"{name}: {value:.4f}")

